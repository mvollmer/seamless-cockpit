#! /usr/bin/python

# This program is intended to demonstrate the role of a management
# system like ManageIQ or Foreman in the Single Sign On dance with
# Cockpit.

# While running, the process maintains a list of hosts in memory, and
# stores the root password for each host.  It might store other
# credentials that allow logging into that host, such as a SSH private
# key.  The root password is retrieved by cockpit-auth-max-pane to
# perform the actual log in for Cockpit.

# In addition to serving the simplistic HTML pages that form the UI,
# this program also responds to some restish API endpoints.  Such a
# request should carry a "Authorization: token XXXX" header with a
# valid token.  Valid tokens are given out by the UI via the links to
# Cockpit and by the /refresh_token endpoint.
#
# - GET /api/host?id=ID
#
# Return the data for the host with the given id, as JSON.

# This program also implements the OAuth implicit grant protocol on
# the /get_token endpoint.
#
# - GET /token?redirect_uri=URI
#
# Respond with a redirect response (code 301) to
# "URI?access_token=XXXX", where XXXX is a valid token for use with
# the API.
#
# If the request has a valid session cookie, the redirection will
# happen right away.  Otherwise, the normal Max Pane login page will
# be shown and the redirection happens after the use has logged in
# there.

import os
import sys
import BaseHTTPServer
import urlparse
import json

USER = "root"
PASS = "hunter2"

LOGIN = """
<html>
  <body>
    <form action="/login" method="post">
      <label>User: <input name="user" type="text"></label>
      <label>Password: <input name="pass" type="password"></label>
      <input name="redirect_uri" type="text" value="{redirect_uri}" style="display: none">
      <button>Log in</button>
    </form>
  </body>
</html>
"""

DASHBOARD = """
<html>
  <body>
    <form action="/logout" method="post">
      <button>Log out</button>
    </form>
    <form action="/add" method="post">
      <label>Host: <input name="host" type="text" value="localhost"></label>
      <label>Root password: <input name="pass" type="password"></label>
      <button>Add</button>
    </form>
    <table>
      <tr><th>Hosts</th></tr>
      {host_rows}
    </table>
  </body>
</html>
"""

DASHBOARD_HOST_ROW = """
<tr>
  <td>{host}</td><td><a href="{link}">Web Console</a></td>
</tr>
"""

COCKPIT_URL = """
https://{pane_host}:9999/={target_host}
"""

hosts = [ ]

sessions = { }

class Session:
    def __init__(self):
        self.token = os.urandom(16).encode("hex")
        print("New session %s" % self.token)

class handler(BaseHTTPServer.BaseHTTPRequestHandler):
    def find_session(self):
        for c in map(lambda c: c.strip().split("="), self.headers.get("Cookie", "").split(";")):
            if c[0] == "token" and c[1] in sessions:
                return sessions[c[1]]
        c = self.headers.get("Authorization", "").split(" ")
        if c[0] == "token" and c[1] in sessions:
            return sessions[c[1]]
        return None

    # Pages

    def login_page(self, redirect_uri = ""):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(LOGIN.format(redirect_uri=redirect_uri))

    def dashboard_page(self, session):
        pane_host=self.headers["Host"].split(":")[0]
        def cockpit_url(h):
            return COCKPIT_URL.format(pane_host=pane_host,
                                      token=session.token,
                                      target_host=h["id"])
        if len(hosts) > 0:
            host_rows = "\n".join([ DASHBOARD_HOST_ROW.format(link=cockpit_url(h), **h)
                                    for h in hosts ])
        else:
            host_rows = "<tr><td>(Database empty)</td></tr>"
        self.send_response(200)
        self.end_headers()
        self.wfile.write(DASHBOARD.format(host_rows=host_rows))

    # UI actions

    def do_login(self, params):
        if params.get("user")[0] == USER and params.get("pass")[0] == PASS:
            s = Session()
            sessions[s.token] = s
            redirect_uri = params.get("redirect_uri", [""])[0]
            if redirect_uri != "":
                # We come here when a request to /token was made
                # without a session, see oauth_token.
                rd = urlparse.urlparse(redirect_uri)
                rd = (rd[0], rd[1], rd[2], rd[3], "access_token=%s" % s.token, rd[5])
                self.send_response(301)
                self.send_header("Location", urlparse.urlunparse(rd))
                self.send_header("Cache-Control", "no-store")
            else:
                self.redirect("token=%s" % s.token)
        else:
            self.send_error(401)

    def do_logout(self, session):
        if session and session.token in sessions:
            del sessions[session.token]
        self.redirect("token=none")

    def do_add(self, params):
        global hosts
        hosts += [ { "id": len(hosts),
                     "host": params.get("host")[0],
                     "password": params.get("pass")[0] } ]
        self.redirect()

    def redirect(self, cookie = None):
        self.send_response(301)
        self.send_header("Location", "/")
        if cookie:
            self.send_header("Set-Cookie", cookie)
        self.end_headers()

    # API

    def api_host(self, session, query):
        try:
            id = int(query["id"][0])
        except:
            id = -1
        if id >= 0 and id < len(hosts):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(json.dumps(hosts[id]))
        else:
            self.send_error(404)

    # OAuth

    def oauth_token(self, session, query):
        if query["redirect_uri"]:
            rd = urlparse.urlparse(query["redirect_uri"][0])
            if session:
                rd = (rd[0], rd[1], rd[2], rd[3], "access_token=%s" % session.token, rd[5])
                self.send_response(301)
                self.send_header("Location", urlparse.urlunparse(rd))
                self.send_header("Cache-Control", "no-store")
            else:
                # Let the user login again, and redirect as requested
                # when he/she does.  See do_login.
                self.login_page(urlparse.urlunparse(rd))
        else:
            self.send_error(400)

    # Routing

    def do_GET(self):
        session = self.find_session()
        url = urlparse.urlparse(self.path)
        params = urlparse.parse_qs(url.query)
        if url.path == "/":
            if not session:
                self.login_page()
            else:
                self.dashboard_page(session)
        elif url.path == "/token":
            self.oauth_token(session, params)
        elif url.path.startswith("/api/"):
            if not session:
                self.send_error(401)
            elif url.path == "/api/host":
                self.api_host(session, params)
            else:
                self.send_error(404)
        else:
            self.send_error(404)

    def do_POST(self):
        session = self.find_session()
        len = int(self.headers.getheader('content-length', 0))
        params = urlparse.parse_qs(self.rfile.read(len), True)
        if self.path == "/login":
            self.do_login(params)
        elif not session:
            self.redirect()
        elif self.path == "/logout":
            self.do_logout(session)
        elif self.path == "/add":
            self.do_add(params)
        else:
            self.send_error(404)

# Main

port = 8080
if len(sys.argv) > 1:
    port = int(sys.argv[2])

print("Listening on port {port}".format(port=port))
BaseHTTPServer.HTTPServer(('', port), handler).serve_forever()
